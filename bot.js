const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');
const cryptoWebhook = require('./cryptoWebhook');
const { telegramToken } = require('./config');
const { User, Deal, Review, Transaction, DealAgreement } = require('./models');
const { addUser } = require('./addUser');
const { sequelize, Sequelize } = require('./db');

const bot = new TelegramBot('6726152643:AAEfFD8YwmjIk3A8PPgwvcbGy_sYGV2LbRU', { polling: true });
const app = express();
const PORT = 3000;

app.use(bodyParser.json());
app.use('/', cryptoWebhook);

let createInvoice, checkInvoiceStatus, transfer;
(async () => {
    const cryptoModule = await import('./cryptoBot.mjs');
    createInvoice = cryptoModule.createInvoice;
    checkInvoiceStatus = cryptoModule.checkInvoiceStatus;
    transfer = cryptoModule.transfer;
})();


const userStates = {};
const dealsPerPage = 5; 
const userLinks = {};
const activeProcesses = {}; 



async function sendMessage(chatId, text, options = {}) {
    try {
        const message = await bot.sendMessage(chatId, text, options);
        return message;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
    }
}

function normalizeUsername(username) {
    return username.startsWith('@') ? username.substring(1) : username;
}

function sendMessage(chatId, text, options = {}) {
    return bot.sendMessage(chatId, text, options).catch((error) => {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
    });
}

async function checkUser(chatId) {
    return await User.findOne({ where: { chatId: chatId.toString() } });
}

async function checkAndUpdateLink(chatId, newLink) {
    const currentLink = userLinks[chatId];
    if (currentLink !== newLink) {
        userLinks[chatId] = newLink;
        console.log(`–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${newLink}`);
    } else {
        console.log(`–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å`);
    }
}

async function hasOpenDeals(userId) {
    const openDeals = await Deal.findAll({
        where: {
            [Sequelize.Op.or]: [
                { buyerId: userId, status: ['in progress', 'spore', 'opened'] },
                { sellerId: userId, status: ['in progress', 'spore', 'opened'] }
            ]
        }
    });
    return openDeals.length > 0;
}

async function showDealsPage(chatId, page = 0) {
    if (activeProcesses[chatId]) {
        console.log(`–ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`);
        return;
    }

    activeProcesses[chatId] = true;

    try {
        const deals = await Deal.findAll({
            where: {
                [Sequelize.Op.or]: [{ buyerId: chatId.toString() }, { sellerId: chatId.toString() }]
            }
        });

        if (deals.length === 0) {
            await sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.");
            return;
        }

        const start = page * dealsPerPage;
        const end = start + dealsPerPage;
        const pageDeals = deals.slice(start, end);

        const dealMessages = pageDeals
            .map(deal => `#Ô∏è‚É£${deal.id}: –°—É–º–º–∞: ${deal.amount}, –°—Ç–∞—Ç—É—Å: ${deal.status}\n–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /deal_${deal.id}\n------------------------------------------------`)
            .join('\n');

        const inlineKeyboard = [];
        if (page > 0) {
            inlineKeyboard.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `deals_page_${page - 1}` });
        }
        if (end < deals.length) {
            inlineKeyboard.push({ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: `deals_page_${page + 1}` });
        }

        const options = {
            reply_markup: {
                inline_keyboard: [inlineKeyboard]
            }
        };

        if (userStates[chatId] && userStates[chatId].messageId) {
            const currentState = userStates[chatId];
            const isTextSame = currentState.dealMessages === dealMessages;
            const isMarkupSame = JSON.stringify(currentState.inlineKeyboard) === JSON.stringify(inlineKeyboard);

            if (!isTextSame || !isMarkupSame) {
                console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
                await bot.editMessageText(dealMessages, {
                    chat_id: chatId,
                    message_id: currentState.messageId,
                    reply_markup: options.reply_markup
                });
                userStates[chatId] = { messageId: currentState.messageId, page, dealMessages, inlineKeyboard };
            } else {
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
            }
        } else {
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
            const message = await sendMessage(chatId, dealMessages, options);
            userStates[chatId] = { messageId: message.message_id, page, dealMessages, inlineKeyboard };
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: ${error.message}`);
    } finally {
        activeProcesses[chatId] = false;
    }
}

bot.onText(/üí∏–°–¥–µ–ª–∫–∏/, async (msg) => {
    const chatId = msg.chat.id;
    showDealsPage(chatId, 0);
});

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('deals_page_')) {
        const page = parseInt(data.split('_')[2], 10);
        showDealsPage(chatId, page);
    }

    bot.answerCallbackQuery(query.id);
});


bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = normalizeUsername(msg.from.username || '–∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    const userId = msg.from.id;
    const userExists = await checkUser(chatId);

    const options = {
        reply_markup: {
            keyboard: [
                [{ text: 'üîç–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { text: 'üí∏–°–¥–µ–ª–∫–∏' }, { text: 'üíé–û—Ç–∑—ã–≤—ã' }],
                [{ text: 'üßæ–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º' }, { text: 'ü™¨–ü—Ä–æ—Ñ–∏–ª—å' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    if (userExists) {
        const currentLink = userLinks[chatId] || userExists.username;
        if (currentLink !== username) {
            userLinks[chatId] = username;
            await User.update({ username }, { where: { chatId: chatId.toString() } });
            console.log(`–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${username}`);
        }
        sendMessage(chatId, `–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: ${username}`, options);
    } else {
        const userData = { id: chatId.toString(), username, balance: 0.00, chatId: userId.toString() };
        const user = await addUser(userData);
        const registrationMessage = user ? "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!" : "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        sendMessage(chatId, registrationMessage, options);
        userLinks[chatId] = username;
    }
});

bot.onText(/\/open_webapp/, (msg) => {
    const chatId = msg.chat.id;
    const webAppUrl = 'http://localhost:3001/webapp';

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–û—Ç–∫—Ä—ã—Ç—å WebApp',
                        web_app: { url: webAppUrl }
                    }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp:', options);
});


bot.on('message', async (msg) => {
    const chatId = msg.chat?.id;
    const text = msg.text?.trim();
    const username = msg.from?.username ? normalizeUsername(msg.from.username) : '–∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    if (!chatId || !text) return;

    const userExists = await checkUser(chatId);
    if (userExists) {
        const currentLink = userLinks[chatId] || userExists.username;
        if (currentLink !== username) {
            userLinks[chatId] = username;
            await User.update({ username }, { where: { chatId: chatId.toString() } });
            console.log(`–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${username}`);
        }
    }

    const commands = {
        'üîç–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': () => sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å @"),
        'üí∏–°–¥–µ–ª–∫–∏': async () => {
            const message = await sendMessage(chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫...");
            userStates[chatId] = { messageId: message.message_id, page: 0 };
            showDealsPage(chatId, 0);
        },
        'üíé–û—Ç–∑—ã–≤—ã': async () => {
            const reviews = await Review.findAll({ where: { userId: chatId.toString() } });
            const reviewMessages = reviews.map(review => `${review.content} - ${review.rating}`).join('\n');
            sendMessage(chatId, reviewMessages || "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.");
        },
        'üßæ–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º': () => sendMessage(chatId, "–°—Å—ã–ª–∫–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."),
        'ü™¨–ü—Ä–æ—Ñ–∏–ª—å': async () => {
            const user = await checkUser(chatId);
            if (user) {
                const reviews = await Review.findAll({ where: { userId: user.id } });
                let averageRating = 0;
                let successfulDeals = 0;
                let unsuccessfulDeals = 0;

                if (reviews.length > 0) {
                    const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
                    averageRating = (totalRating / reviews.length).toFixed(1);

                    reviews.forEach(review => {
                        if (review.rating >= 3) {
                            successfulDeals += 1;
                        } else if (review.rating > 0) {
                            unsuccessfulDeals += 1;
                        }
                    });
                }

                const totalDeals = successfulDeals + unsuccessfulDeals;
                const successRate = totalDeals > 0 ? ((successfulDeals / totalDeals) * 100).toFixed(1) : 0;
                const failureRate = totalDeals > 0 ? ((unsuccessfulDeals / totalDeals) * 100).toFixed(1) : 0;

                const accountInfo = `üîÖID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}\nüåê–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user.username}\nüí∞–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance} USDT\n\n‚≠ê–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${averageRating}\n‚úÖ–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${successRate}%\n‚ùå–ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${failureRate}%`;

                const accountOptions = {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [
                                { text: '‚ûï–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'replenish_balance' },
                                { text: '‚ûñ–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data: 'withdraw_balance' }
                            ],
                            [
                                { text: '‚ö°Ô∏è–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞', callback_data: 'active_deal' }
                            ]
                        ]
                    })
                };

                sendMessage(chatId, accountInfo, accountOptions);
            } else {
                sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        }
    };

    if (commands[text]) commands[text]();
});


bot.onText(/\/showmenu/, (msg) => {
    const chatId = msg.chat.id;
    
    const menuOptions = {
        reply_markup: {
            keyboard: [
                ['üîç–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üí∏–°–¥–µ–ª–∫–∏'],
                ['üíé–û—Ç–∑—ã–≤—ã', 'üßæ–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º'],
                ['ü™¨–ü—Ä–æ—Ñ–∏–ª—å']
            ],
            resize_keyboard: true, 
            one_time_keyboard: false
        }
    };

    sendMessage(chatId, "–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ:", menuOptions);
});

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;

    if (data === 'active_deal') {

        const activeDeal = await Deal.findOne({
            where: {
                [Sequelize.Op.or]: [
                    { buyerId: chatId.toString(), status: ['opened', 'spore', 'in progress'] },
                    { sellerId: chatId.toString(), status: ['opened', 'spore', 'in progress'] }
                ]
            },
            order: [['createdAt', 'DESC']]
        });

        if (!activeDeal) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.");
            return;
        }

        const otherPartyId = (activeDeal.buyerId === chatId.toString()) ? activeDeal.sellerId : activeDeal.buyerId;
        const otherParty = await User.findOne({ where: { chatId: otherPartyId } });
        const otherPartyUsername = otherParty ? `@${otherParty.username}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userRole = activeDeal.buyerId === chatId.toString() ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';

        const activeDealDetails = `‚ö°Ô∏è–î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ #${activeDeal.id}:
üí∞–°—É–º–º–∞: ${activeDeal.amount} USDT
üßæ–û–ø–∏—Å–∞–Ω–∏–µ: ${activeDeal.description}
üì∂–°—Ç–∞—Ç—É—Å: ${activeDeal.status}
üë§–° –∫–µ–º —Å–¥–µ–ª–∫–∞: ${otherPartyUsername}
üåê–í —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –≤—ã: ${userRole}`;

        const inlineKeyboard = [];

        if (activeDeal.status === 'opened') {
            inlineKeyboard.push([{ text: '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `cancel_deal_${activeDeal.id}` }]);
        } else if (activeDeal.status !== 'closed' && activeDeal.status !== 'cancelled') {
            inlineKeyboard.push([{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –ø–æ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ', callback_data: `open_dispute_${activeDeal.id}` }]);
            inlineKeyboard.push([{ text: '–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `close_deal_${activeDeal.id}` }]);
        }

        const options = {
            reply_markup: JSON.stringify({
                inline_keyboard: inlineKeyboard
            })
        };

        bot.sendMessage(chatId, activeDealDetails, options);
    }

    bot.answerCallbackQuery(callbackQuery.id);
});


bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id.toString();

    if (query.data === 'replenish_balance') {
        if (userStates[chatId] && userStates[chatId].action === 'replenish_balance') {
            sendMessage(chatId, '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.');
            return;
        }

        userStates[chatId] = { action: 'replenish_balance' };
        sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:');
    } else if (query.data === 'withdraw_balance') {
        if (userStates[chatId] && userStates[chatId].action === 'withdraw_balance') {
            sendMessage(chatId, '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.');
            return;
        }

        userStates[chatId] = { action: 'withdraw_balance' };
        sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:');
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat?.id;
    const text = msg.text?.trim();

    if (userStates[chatId]) {
        const amount = parseFloat(text);
        if (isNaN(amount) || amount <= 0) {
        }

        if (userStates[chatId].action === 'replenish_balance') {
            await handleReplenishBalance(chatId, amount);
        } else if (userStates[chatId].action === 'withdraw_balance') {
            await handleWithdrawBalance(chatId, amount);
        }

        delete userStates[chatId];
    }
});

async function handleReplenishBalance(chatId, amount) {
    try {
        const invoice = await createInvoice(amount);
        const paymentUrl = invoice.bot_invoice_url;

        if (paymentUrl) {
            await bot.sendMessage(chatId, `–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} USD, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentUrl}`);

            const checkPaymentStatus = async () => {
                try {
                    const isPaid = await checkInvoiceStatus(invoice.invoice_id);
                    if (isPaid) {
                        const commissionRate = 0.07;
                        const netAmount = amount * (1 - commissionRate); 
                        await updateUserBalance(chatId, netAmount);
                        await addTransaction(chatId, 'replenishment', netAmount);
                        await bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${netAmount.toFixed(2)} USD (–∫–æ–º–∏—Å—Å–∏—è 7%).`);
                    } else {
                        setTimeout(checkPaymentStatus, 30000); 
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
                }
            };
            setTimeout(checkPaymentStatus, 30000);
        } else {
            await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

async function handleWithdrawBalance(chatId, amount) {
    try {
        const user = await checkUser(chatId);
        
        if (!user) {
            return sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        const openDealsExist = await hasOpenDeals(user.id);
        if (openDealsExist) {
            return sendMessage(chatId, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏.");
        }

        if (user.balance < amount) {
            return sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.");
        }

        console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", {
            chat_id: user.chatId,
            asset: 'USDT',
            amount: amount.toString(),
            comment: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'
        });

        const transferResult = await transfer(user.chatId, 'USDT', amount.toString(), {
            comment: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'
        });

        if (transferResult.ok) {
            user.balance -= amount; 
            await user.save();

            sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ ${amount} USDT!`);
        } else {
            sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: ' + transferResult.error.name);
            console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:", transferResult.error.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤:', error.message);
        sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}


async function updateUserBalance(chatId, amount) {
    await User.increment({ balance: amount }, { where: { chatId: chatId.toString() } });
}

async function addTransaction(userId, type, amount) {
    await Transaction.create({ userId, type, amount });
}
bot.onText(/@(\w+)|\/findById (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id.toString();
    const username = match[1];      
    const userId = match[2];        

    let user;

    if (username) {
        user = await User.findOne({ where: { username } });
    } else if (userId) {
        user = await User.findOne({ where: { id: userId } });
    }

    if (user) {
        const reviews = await Review.findAll({ where: { userId: user.id } });
        
        let successfulDeals = 0;
        let unsuccessfulDeals = 0;
        let averageRating = 0;

        if (reviews.length > 0) {
            const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
            averageRating = (totalRating / reviews.length).toFixed(1);

            reviews.forEach(review => {
                if (review.rating >= 3) {
                    successfulDeals += 1;
                } else if (review.rating > 0) {
                    unsuccessfulDeals += 1;
                }
            });
        }

        const totalDeals = successfulDeals + unsuccessfulDeals;
        const successRate = totalDeals > 0 ? ((successfulDeals / totalDeals) * 100).toFixed(1) : 0;
        const failureRate = totalDeals > 0 ? ((unsuccessfulDeals / totalDeals) * 100).toFixed(1) : 0;

        const userInfo = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username || 'ID ' + user.id}\n\n` +
                         `üëÅ‚Äçüó®–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalDeals}\n` +
                         `‚úÖ–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${successfulDeals} (${successRate}%)\n` +
                         `‚ùå–ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${unsuccessfulDeals} (${failureRate}%)\n` +
                         `‚≠êÔ∏è–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${averageRating}`;

        const options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: 'üíé–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', callback_data: `reviews_${user.id}` }],
                    [{ text: 'üí∏–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `propose_deal_${user.id}` }]
                ]
            })
        };

        bot.sendMessage(chatId, userInfo, options);
    } else {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id.toString(); 
    const messageId = callbackQuery.message.message_id; 

    const hasOpenDeals = async (userId) => {
        const openDealStatuses = ['in progress', 'spore'];
    
        const openDeals = await Deal.findOne({
            where: {
                [Sequelize.Op.or]: [
                    {
                        [Sequelize.Op.and]: [
                            { buyerId: userId },
                            { status: { [Sequelize.Op.in]: openDealStatuses } }
                        ]
                    },
                    {
                        [Sequelize.Op.and]: [
                            { sellerId: userId },
                            { status: { [Sequelize.Op.in]: openDealStatuses } }
                        ]
                    }
                ]
            }
        });
    
        console.log(`hasOpenDeals –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${openDeals ? '–¥–∞' : '–Ω–µ—Ç'}`);
    
        return openDeals !== null;
    }

    const hasOpenDeals2 = async (userId) => {
        const openDealStatuses = ['opened'];
    
        const openDeals = await Deal.findOne({
            where: {
                [Sequelize.Op.or]: [
                    {
                        [Sequelize.Op.and]: [
                            { buyerId: userId },
                            { status: { [Sequelize.Op.in]: openDealStatuses } }
                        ]
                    },
                    {
                        [Sequelize.Op.and]: [
                            { sellerId: userId },
                            { status: { [Sequelize.Op.in]: openDealStatuses } }
                        ]
                    }
                ]
            }
        });

        console.log(`hasOpenDeals –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${openDeals ? '–¥–∞' : '–Ω–µ—Ç'}`);
    
        return openDeals !== null;
    }

    if (data.startsWith('propose_deal_')) {
        const targetChatId = data.split('_')[2].toString(); 

        if (await hasOpenDeals2(chatId)) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.");
            return;
        }

        if (await hasOpenDeals2(targetChatId)) {
            bot.sendMessage(chatId, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return;
        }

        const targetUser = await User.findOne({ where: { chatId: targetChatId } });
        if (!targetUser) {
            bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        const roleSelectionKeyboard = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–Ø –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', callback_data: `choose_buyer_${targetChatId}` }],
                    [{ text: '–Ø –ü—Ä–æ–¥–∞–≤–µ—Ü', callback_data: `choose_seller_${targetChatId}` }]
                ]
            })
        };
        bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ —Å–¥–µ–ª–∫–µ:", roleSelectionKeyboard);
    }

    if (data.startsWith('choose_buyer_') || data.startsWith('choose_seller_')) {
        bot.deleteMessage(chatId, messageId).catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error));

        const role = data.startsWith('choose_buyer_') ? 'buyerId' : 'sellerId';
        const targetChatId = data.split('_')[2].toString();
        const roleName = role === 'buyerId' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü—Ä–æ–¥–∞–≤—Ü–∞';

        bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å ${roleName}.\n-–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n-'—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ' –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n1000 –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞`);

        const messageHandler = async (msg) => {
            if (msg.chat.id.toString() !== chatId) return;

            const [amountStr, ...descriptionParts] = msg.text.split(' ');
            const dealDescription = descriptionParts.join(' ');
            const amount = parseFloat(amountStr);
            const senderUsername = msg.from.username || "–∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

            if (isNaN(amount) || !dealDescription) {
                bot.sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                bot.removeListener('message', messageHandler);
                return;
            }

            const senderUser = await User.findOne({ where: { chatId: chatId } });
            if (!senderUser) {
                bot.sendMessage(chatId, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.");
                bot.removeListener('message', messageHandler);
                return;
            }

            if (role === 'buyerId' && senderUser.balance < amount) {
                const requiredAmount = (amount - senderUser.balance).toFixed(2);
                bot.sendMessage(chatId, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ ${requiredAmount} USDT.`);
                bot.removeListener('message', messageHandler);
                return;
            }

            const dealKey = `${chatId}_${targetChatId}_${Date.now()}`;
            const existingDeal = await Deal.findOne({ where: { dealKey } });

            if (existingDeal) {
                bot.sendMessage(chatId, "–¢–∞–∫–∞—è —Å–¥–µ–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                bot.removeListener('message', messageHandler);
                return;
            }

            try {
                const dealData = {
                    amount,
                    status: 'opened',
                    dealKey,
                    description: dealDescription
                };
                dealData[role] = chatId.toString();
                dealData[role === 'buyerId' ? 'sellerId' : 'buyerId'] = targetChatId.toString();

                await Deal.create(dealData);

                await DealAgreement.create({ dealKey, userId: chatId.toString(), agreed: false });
                await DealAgreement.create({ dealKey, userId: targetChatId.toString(), agreed: false });

                const options = {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `accept_${dealKey}` }],
                            [{ text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `decline_${dealKey}` }]
                        ]
                    })
                };
                const targetUser2 = await User.findOne({ where: { chatId: targetChatId } });

                bot.sendMessage(targetChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${senderUsername} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∫—É –Ω–∞ —Å—É–º–º—É ${amount} USDT. –û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: '${dealDescription}'`, options);
                bot.sendMessage(chatId, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${targetUser2.username}. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.`);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", error);
                bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            } finally {
                bot.removeListener('message', messageHandler);
            }
        };

        bot.on('message', messageHandler);
    }


    if (data.startsWith('accept_') || data.startsWith('decline_')) {
        const dealKey = data.split('_')[1];
        const isAccepting = data.startsWith('accept_');
        const newStatus = isAccepting ? 'accepted' : 'declined';

        try {
            if (await hasOpenDeals(chatId)) {
                bot.sendMessage(chatId, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –Ω–æ–≤–æ–π.");
                return;
            }

            await Deal.update(
                { status: newStatus },
                { where: { dealKey } }
            );

            const message = isAccepting ? "–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞." : "–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.";
            bot.sendMessage(chatId, message);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:`, error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏.");
        }
    }
});



bot.onText(/\/deal_(\d+)/, async (msg, match) => {
    const chatId = msg.chat.id.toString(); 
    const dealId = match[1];

    const deal = await Deal.findOne({ where: { id: dealId } });

    if (!deal) {
        bot.sendMessage(chatId, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
    }

    if (deal.buyerId !== chatId && deal.sellerId !== chatId) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ.");
        return;
    }

    const otherPartyId = (deal.buyerId === chatId) ? deal.sellerId : deal.buyerId;
    const otherParty = await User.findOne({ where: { chatId: otherPartyId } });
    const otherPartyUsername = otherParty ? `@${otherParty.username}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    const userRole = deal.buyerId === chatId ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';

    const dealDetails = `–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ #${deal.id}:
üí∞–°—É–º–º–∞: ${deal.amount} USDT
üßæ–û–ø–∏—Å–∞–Ω–∏–µ: ${deal.description}
üì∂–°—Ç–∞—Ç—É—Å: ${deal.status}
üë§–° –∫–µ–º —Å–¥–µ–ª–∫–∞: ${otherPartyUsername}
üåê–í —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –≤—ã: ${userRole}`;

    const inlineKeyboard = [];
    
    if (deal.status === 'opened') {
        inlineKeyboard.push([{ text: '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `cancel_deal_${deal.id}` }]);
    } else if (deal.status !== 'closed' && deal.status !== 'cancelled') {
        inlineKeyboard.push([{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –ø–æ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ', callback_data: `open_dispute_${deal.id}` }]);
        inlineKeyboard.push([{ text: '–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `close_deal_${deal.id}` }]);
    }

    const options = {
        reply_markup: JSON.stringify({
            inline_keyboard: inlineKeyboard
        })
    };

    bot.sendMessage(chatId, dealDetails, options);
});

let awaitingReviews = {};

async function requestReview(fromUserId, dealId, toUserId) {
    awaitingReviews[fromUserId] = { dealId, toUserId }; 
    bot.sendMessage(fromUserId, `–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: "–û—Ç–ª–∏—á–Ω–∞—è —Å–¥–µ–ª–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é! 5"`);
}

bot.on('message', async (msg) => {
    const fromUserId = msg.chat.id;

    if (awaitingReviews[fromUserId]) {
        const { dealId, toUserId } = awaitingReviews[fromUserId];
        const [reviewText, ratingStr] = msg.text.split(/(\d)$/).map(s => s.trim());
        const rating = parseInt(ratingStr);

        if (isNaN(rating) || rating < 1 || rating > 5 || !reviewText) {
            bot.sendMessage(fromUserId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –†–µ–π—Ç–∏–Ω–≥'. –ü—Ä–∏–º–µ—Ä: '–û—Ç–ª–∏—á–Ω–∞—è —Å–¥–µ–ª–∫–∞! 5'");
            return; 
        }

        try {
            await Review.create({
                userId: toUserId,
                dealId: dealId,
                content: reviewText,
                rating: rating
            });
            bot.sendMessage(fromUserId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!");
            delete awaitingReviews[fromUserId]; 
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
            bot.sendMessage(fromUserId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
});

const admins = ["id –∞–¥–º–∏–Ω–∞"];

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;
    const username = callbackQuery.from.username;

    if (data.startsWith('open_dispute_')) {
        const dealId = data.split('_')[2];

        const deal = await Deal.findOne({ where: { id: dealId } });

        if (!deal) {
            bot.sendMessage(chatId, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        if (deal.buyerId !== chatId.toString() && deal.sellerId !== chatId.toString()) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ.");
            return;
        }

        await Deal.update({ status: 'spore', disputeInitiator: username }, { where: { id: dealId } });

        bot.sendMessage(deal.buyerId, `–û–∂–∏–¥–∞–π—Ç–µ –∞—Ä–±–∏—Ç—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ #${dealId}. –°–ø–æ—Ä –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${username}.`);
        bot.sendMessage(deal.sellerId, `–û–∂–∏–¥–∞–π—Ç–µ –∞—Ä–±–∏—Ç—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ #${dealId}. –°–ø–æ—Ä –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${username}.`);

        const disputeMessage = `
–°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #${dealId}.
–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–ø–æ—Ä–∞: @${username}
ID —Å–¥–µ–ª–∫–∏: ${dealId}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${deal.buyerId}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${deal.sellerId}
–û–ø–∏—Å–∞–Ω–∏–µ: ${deal.description || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
        `;

        for (const adminId of admins) {
            bot.sendMessage(adminId, disputeMessage);
        }
    } else if (data.startsWith('cancel_deal_')) {
        const dealId = data.split('_')[2];

        await Deal.update({ status: 'cancelled' }, { where: { id: dealId } });
        bot.sendMessage(chatId, `–°–¥–µ–ª–∫–∞ #${dealId} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);

    } else if (data.startsWith('close_deal_')) {
        const dealId = data.split('_')[2];

        const deal = await Deal.findOne({ where: { id: dealId } });

        if (!deal) {
            bot.sendMessage(chatId, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        if (deal.buyerId !== chatId.toString() && deal.sellerId !== chatId.toString()) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ.");
            return;
        }

        const otherPartyId = (deal.buyerId === chatId.toString()) ? deal.sellerId : deal.buyerId;

        bot.sendMessage(otherPartyId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${callbackQuery.from.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ #${deal.id}.\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ?`, {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ', callback_data: `confirm_close_${deal.id}` }],
                    [{ text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ', callback_data: `decline_close_${deal.id}` }]
                ]
            })
        });

        bot.sendMessage(chatId, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.");

    } else if (data.startsWith('confirm_close_')) {
        const dealId = data.split('_')[2];

        const deal = await Deal.findOne({ where: { id: dealId } });

        if (!deal) {
            bot.sendMessage(chatId, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        const buyer = await User.findOne({ where: { chatId: deal.buyerId } });
        const seller = await User.findOne({ where: { chatId: deal.sellerId } });

        if (!buyer || !seller) {
            bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.");
            return;
        }

        const dealAmount = parseFloat(deal.amount);
        if (isNaN(dealAmount)) {
            bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏.");
            return;
        }

        const t = await sequelize.transaction();

        try {
            if (buyer.balance < dealAmount) {
                bot.sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏.");
                await t.rollback();
                return;
            }

            buyer.balance = parseFloat(buyer.balance) - dealAmount;
            await buyer.save({ transaction: t });

            seller.balance = parseFloat(seller.balance) + dealAmount;
            await seller.save({ transaction: t });

            await Deal.update({ status: 'closed' }, { where: { id: dealId }, transaction: t });

            await t.commit();

            bot.sendMessage(deal.buyerId, `–°–¥–µ–ª–∫–∞ #${dealId} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –æ–±–æ—é–¥–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é.`);
            bot.sendMessage(deal.sellerId, `–°–¥–µ–ª–∫–∞ #${dealId} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –æ–±–æ—é–¥–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é.`);

            setTimeout(async () => {
                await requestReview(deal.buyerId, dealId, deal.sellerId);
                await requestReview(deal.sellerId, dealId, deal.buyerId);
            }, 1000);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏:", error);
            await t.rollback();
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }

    } else if (data.startsWith('decline_close_')) {
        const dealId = data.split('_')[2];

        const deal = await Deal.findOne({ where: { id: dealId } });

        if (!deal) {
            bot.sendMessage(chatId, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        const initiatorId = (deal.buyerId === callbackQuery.message.chat.id.toString()) ? deal.sellerId : deal.buyerId;
        bot.sendMessage(initiatorId, `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ #${dealId} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.`);
    }

    bot.answerCallbackQuery(callbackQuery.id);
});



bot.onText(/\/make_deal @(\w+) (\d+(?:\.\d{1,2})?) (.+)/, async (msg, match) => {
    const [_, targetUsername, amount, dealDescription] = match;
    const chatId = msg.chat.id;
    const senderUsername = msg.from.username || "–∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const targetChatId = await findUserChatId(targetUsername);

    if (targetChatId) {
        const dealKey = `${chatId}_${targetChatId}_${Date.now()}`;
        const existingDeal = await Deal.findOne({ where: { dealKey } });
        if (existingDeal) {
            bot.sendMessage(chatId, "–¢–∞–∫–∞—è —Å–¥–µ–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
            return;
        }

        await Deal.create({
            buyerId: chatId.toString(),
            sellerId: targetChatId.toString(),
            amount,
            status: 'opened',
            dealKey
        });

        await DealAgreement.create({ dealKey, userId: chatId.toString(), agreed: false });
        await DealAgreement.create({ dealKey, userId: targetChatId.toString(), agreed: false });

        const options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `accept_${dealKey}` }],
                    [{ text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: `decline_${dealKey}` }]
                ]
            })
        };
        bot.sendMessage(targetChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${senderUsername} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∫—É –Ω–∞ —Å—É–º–º—É ${amount} USDT. –û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: '${dealDescription}'`, options);
        bot.sendMessage(chatId, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${targetUsername}. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.`);
    } else {
        bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const dealKeyMatch = data.match(/(\d+_\d+_\d+)$/);
    const dealKey = dealKeyMatch ? dealKeyMatch[0] : null;
    const action = dealKey ? data.slice(0, data.lastIndexOf(dealKey) - 1) : data;

    const responderChatId = callbackQuery.message.chat.id;
    
    const deal = await Deal.findOne({ where: { dealKey } });

    const responderUser = await User.findOne({ where: { chatId: responderChatId.toString() } });

    if (!responderUser) {
        bot.sendMessage(responderChatId, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");
        return;
    }

    if (action === 'accept' && deal.status === 'opened') {

        const userBalance = parseFloat(responderUser.balance);
        const dealAmount = parseFloat(deal.amount);

        if (deal.buyerId === responderChatId.toString() && userBalance < dealAmount) {
            const requiredAmount = (dealAmount - userBalance).toFixed(2);
            bot.sendMessage(responderChatId, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ ${requiredAmount} USDT.`);
            return;
        }

        deal.status = 'in progress';
        await deal.save();

        bot.sendMessage(deal.buyerId, `–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –Ω–∞ —Å—É–º–º—É ${dealAmount} USDT –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞.`);
        bot.sendMessage(deal.sellerId, `–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –Ω–∞ —Å—É–º–º—É ${dealAmount} USDT –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞.`);
    }
    else if (action === 'decline' && deal.status === 'opened') {
        deal.status = 'cancelled';
        await deal.save();

        bot.sendMessage(deal.buyerId, "–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
        bot.sendMessage(deal.sellerId, "–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
    }
    else if (action === 'finish' && deal.status === 'in progress') {
        const otherPartyId = deal.buyerId === responderChatId.toString() ? deal.sellerId : deal.buyerId;

        bot.sendMessage(otherPartyId, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É?", {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `confirm_finish_${dealKey}` }],
                    [{ text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `deny_finish_${dealKey}` }]
                ]
            })
        });
        bot.sendMessage(responderChatId, "–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏—è –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.");
    }
    else if (action === 'confirm_finish' && deal.status === 'in progress') {
        deal.status = 'closed';
        await deal.save();

        bot.sendMessage(deal.buyerId, "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        bot.sendMessage(deal.sellerId, "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }
    else if (action === 'deny_finish') {
        bot.sendMessage(deal.buyerId, "–°–¥–µ–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–∫–∞–∑ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.");
        bot.sendMessage(deal.sellerId, "–°–¥–µ–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–∫–∞–∑ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.");
    }

    bot.answerCallbackQuery(callbackQuery.id);
});

async function findUserChatId(username) {
    username = normalizeUsername(username);
    const user = await User.findOne({ where: { username } });
    return user ? user.chatId : null;
}

async function checkUserExists(chatId) {
    const user = await User.findOne({ where: { id: chatId.toString() } });
    return user !== null;
}

app.listen(PORT, () => {
    console.log(`Server is running and webhook is listening on port ${PORT}`);
});

module.exports = { start: () => bot.startPolling() };